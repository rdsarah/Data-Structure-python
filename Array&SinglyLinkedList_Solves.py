# -*- coding: utf-8 -*-
"""CSE220_Lab Assignment 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q_CmAVs8mUZ1I48JyUUAxs0jFV5IGv79

**Instructions to Follow (Failing to follow these will result mark deductions).**
1. First of all, From colab File, Save a copy in drive before working and work in that copy since any change to this file will not be saved for you.
2. You can not use any built-in function except len()

3. You can not use any other python collections except array (e.g: tuple, dictionaries etc.).

4. We will initialize a new array using numpy library. We have to mention the fixed size during initialization. There might be 4 approaches.

 i. arr = np.array([None] * 10) #Initializing an array length 10 with values None.

 ii. arr = np.array([0] * 10) #Initializing an array length 10 with values zero.

 iii. arr = np.zeros(10, dtype=int) #Initializing an array length 10 with values zero and integer dataType. By default, dtype is float.

 iv. arr = np.array([10, 20, 30, 40]) #Initializing an array length 4 with the values.
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

"""You will see the status Accepted after completion if your code is correct.

If your function is wrong you will see wrong [correction percentage]

Do not change the driver code statements. You can only change the input values to test your code.
"""

#You must run this cell to print matrix and for the driver code to work
def print_matrix(m):
  row,col = m.shape
  for i in range(row):
    c = 1
    print('|', end='')
    for j in range(col):
      c += 1
      if(len(str(m[i][j])) == 1):
        print(' ',m[i][j], end = '  |')
        c += 6
      else:
        print(' ',m[i][j], end = ' |')
        c += 6
    print()
    print('-'*(c-col))

#Task 01: Merge Lineup

def mergeLineup(pokemon_1, pokemon_2):
    result = np.array([0]*len(pokemon_1))

    for i in range(len(pokemon_1)):
        if pokemon_1[i]==None:
            pokemon_1[i] = 0
        if pokemon_2[len(pokemon_1)-1-i]==None:
            pokemon_2[len(pokemon_1)-1-i] = 0
        result[i] = pokemon_1[i] + pokemon_2[len(pokemon_2)-i-1]

    return result


  #To Do

print("///  Task 01: Merge Lineup  ///")
pokemon_1 = np.array([12, 3, 25, 1, None])
pokemon_2 = np.array([5, -9, 3, None, None] )
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 1: {returned_value}') # This should print [12, 3, 28, -8, 5]
unittest.output_test(returned_value, np.array([12, 3, 28, -8, 5]))
pokemon_1 = np.array([4, 5, -1, None, None])
pokemon_2 = np.array([2, 27, 7, 12, None])
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 1: {returned_value}') # This should print [4,17,6,27,2]
unittest.output_test(returned_value, np.array([4,17,6,27,2]))

# Task 02: Discard Cards

def discardCards(cards, t):
    flag = True
    for i in range(len(cards)):
        if cards[i]==t:
            if flag==True:
                cards[i] = 0
                flag = False
            else:
                flag = True
    for j in range(len(cards)-1):
        for k in range(j,len(cards)-1):
            if cards[k]==0:
                cards[k], cards[k+1] = cards[k+1], cards[k]

    return cards

  # TO DO



print("///  Task 02: Discard Cards  ///")
cards = np.array([1,3,7,2,5,2,2,2,0])
returned_value = discardCards(cards, 2)
print(f'Task 2: {returned_value}') # This should print [1,3,7,5,2,2,0,0,0]
unittest.output_test(returned_value, np.array([1,3,7,5,2,2,0,0,0]))

cards = np.array([5,5,5,0,0])
returned_value = discardCards(cards, 5)
print(f'Task 2: {returned_value}') # This should print [5,0,0,0,0]
unittest.output_test(returned_value, np.array([5,0,0,0,0]))

#Task 03: Decryption Process

def decrypt_matrix(matrix):
    row, col = matrix.shape
    result = np.array([0]*(col-1))
    arr = np.array([0]*col)

    for j in range(col):
        add = 0
        for i in range(row):
            add += matrix[i][j]
        arr[j] = add
    for k in range(len(arr)-1):
        result[k] = arr[k+1] - arr[k]

    return result

  #To Do

matrix=np.array([[1,3,1],
                 [6,4,2],
                 [5,1,7],
                 [9,3,3],
                 [8,5,4]
                 ])

returned_array=decrypt_matrix(matrix)
print(returned_array)
#This should print [-13, 1]

# Task 04: Zigzag Walk

def walk_zigzag(floor):
    row, col = floor.shape

    for i in range(col):
        for j in range(row):
            if i%2==0 and j%2==0:
                print(floor[j][i], end = " ")
            if i%2!=0 and j%2!=0:
                print(floor[col-1-j][i], end = " ")
        print()


  #TO DO


floor = np.array([[ '3' , '8' , '4' , '6' , '1'],
                  ['7' , '2' , '1' , '9' , '3'],
                  ['9' , '0' , '7' , '5' , '8'],
                  ['2' , '1' , '3' , '4' , '0'],
                  ['1' , '4' , '2' , '8' , '6']]
                )

print_matrix(floor)
print('Walking Sequence:')
walk_zigzag(floor)
#This should print
# 3 9 1
# 1 2
# 4 7 2
# 4 9
# 1 8 6
print('################')
floor = np.array([[ '3' , '8' , '4' , '6' , '1'],
                  ['7' , '2' , '1' , '9' , '3'],
                  ['9' , '0' , '7' , '5' , '8'],
                  ['2' , '1' , '3' , '4' , '0']]
                )

print_matrix(floor)
print('Walking Sequence:')
walk_zigzag(floor)
#This should print
# 3 9
# 1 2
# 4 7
# 4 9
# 1 8

# Task 05: Row Rotation Policy of BRACU Classroom
def row_rotation(exam_week, seat_status):
    row, col = seat_status.shape

    n = 1
    while n<exam_week:
        temp = seat_status[row-1]
        temp = np.array(temp)
        for i in range(row):
            seat_status[row-1-i] = seat_status[row-2-i]
        seat_status[0] = temp
        n += 1
    print(seat_status)
    row_no = (row + exam_week - 1)%row

    return row_no


  #To Do


seat_status = np.array([[ 'A' , 'B' , 'C' , 'D' , 'E'],
                  ['F' , 'G' , 'H' , 'I' , 'J'],
                  ['K' , 'L' , 'M' , 'N' , 'O'],
                  ['P' , 'Q' , 'R' , 'S' , 'T'],
                  ['U' , 'V' , 'W' , 'X' , 'Y'],
                  ['Z' , 'AA' , 'BB' , 'CC' , 'DD']])
exam_week=3
print_matrix(seat_status)
print()
row_number=row_rotation(exam_week, seat_status) #This should print modified seat status after rotation
print(f'Your friend AA will be on row {row_number}') #This should print Your friend AA will be on row 2

#Task 06: Matrix Compression

def compress_matrix(mat):
    row, col = mat.shape
    result = np.array([[0]*(row//2)]*(col//2))

    for i in range(row):
        for j in range(col):
            if i%2==0 and j%2==0:
                result[i//2][j//2] = mat[i][j] + mat[i+1][j] + mat[i][j+1] + mat[i+1][j+1]


    return result


  #TO DO

matrix=np.array([[1,2,3,4],
                 [5,6,7,8],
                 [1,3,5,2],
                 [-2,0,6,-3]
                 ])
print_matrix(matrix)
print("...............")
returned_array=compress_matrix(matrix)
print_matrix(returned_array)
#This should print

#|  14  |  22 |
#--------------
#|  2  |  10  |
#--------------

#Task 07: Game Arena

def play_game(arena):
    row, col = arena.shape
    point = 0

    for i in range(row):
        for j in range(col):
            if arena[i][j]%50==0 and arena[i][j]!=0:
                if i<(row-1) and arena[i+1][j]==2:
                    point += 2
                if j<(col-1) and arena[i][j+1]==2:
                    point+=2
                if i>0 and arena[i-1][j]==2:
                    point+=2
                if j>0 and arena[i][j-1]==2:
                    point+=2
    if point>=10:
        print(f"Points Gained: {point}. Your team has survived the game.")
    else:
        print(f"Points Gained: {point}. Your team is out.")


  #TO DO

arena=np.array([[0,2,2,0],
                [50,1,2,0],
                [2,2,2,0],
                [1,100,2,0]
                ])
print_matrix(arena)
play_game(arena)
#This should print
#Points Gained: 6. Your team is out.

print(".....................")
arena=np.array([[0,2,2,0,2],
                [1,50,2,1,100],
                [2,2,2,0,2],
                [0,200,2,0,0]
                ])
print_matrix(arena)
play_game(arena)
#This should print
#Points Gained: 14. Your team has survived the game.





